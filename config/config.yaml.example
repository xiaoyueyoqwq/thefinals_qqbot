# -----------------------------------------------------------------
# QQ 平台机器人配置 (如果不需要QQ平台，可以忽略或删除此部分)
# -----------------------------------------------------------------
bot:
  appid: "在此处填写你的QQ机器人AppID"
  token: "在此处填写你的QQ机器人Token"
  secret: "在此处填写你的QQ机器人Secret"  # 用于oauth场景，如果没有则留空
  sandbox: false                        # 是否使用沙箱环境 (true/false)

# -----------------------------------------------------------------
# HeyBox (小黑盒) 平台配置 (如果不需要HeyBox平台，可以忽略或删除此部分)
# -----------------------------------------------------------------
heybox:
  enabled: false                               # 是否启用HeyBox平台 (true/false)
  token: "在此处填写你的HeyBox机器人Token"         # 登录小黑盒开放平台获取

# -----------------------------------------------------------------
# Kook (开黑啦) 平台配置 (如果不需要Kook平台，可以忽略或删除此部分)
kook:
  enabled: false                               # 是否启用Kook平台 (true/false)
  token: "在此处填写你的Kook机器人Token"         # 登录Kook开放平台获取
# -----------------------------------------------------------------

# -----------------------------------------------------------------
# 性能配置
# -----------------------------------------------------------------
max_concurrent: 5  # 机器人处理消息的最大并发数
max_workers: 10    # 内部线程池的最大工作线程数

# -----------------------------------------------------------------
# 调试与开发配置
# -----------------------------------------------------------------
debug:
  enabled: true      # 是否启用调试模式，会输出更详细的日志
  test_reply: false  # 是否启用调试回复功能，用于测试
  message_id: false  # 是否在发送的消息末尾附加唯一ID，用于调试
  local_mode: true   # 是否启用本地开发模式。在此模式下，图片会上传到图床再发送URL，适合本地网络无法被公网访问的情况。

# -----------------------------------------------------------------
# 网络代理配置
# -----------------------------------------------------------------
proxy:
  enabled: false          # 是否为整个应用启用网络代理
  host: "127.0.0.1"       # 代理主机地址
  port: 7890              # 代理端口 (例如 Clash 的默认端口)
  type: "http"            # 代理类型 (支持 http / socks5)

# -----------------------------------------------------------------
# The Finals API 数据源配置
# -----------------------------------------------------------------
api:
  use_proxy: false  # 是否让API请求走上方的网络代理
  # 标准API源 (主数据源)
  standard:
    base_url: "https://api.the-finals-leaderboard.com"
  # 代理API源 (如果标准源无法访问，可以配置一个反代地址)
  proxy:
    base_url: ""
  # 备用API源 (当以上源都失败时的最后选择)
  backup:
    base_url: ""

# -----------------------------------------------------------------
# API 服务器配置 (用于对外提供图片等资源访问)
# -----------------------------------------------------------------
server:
  api:
    enabled: true        # 是否启用内置的API服务器
    host: "0.0.0.0"      # API服务器监听地址, 0.0.0.0 表示监听所有网络接口
    port: 8080           # API服务器监听端口
    # !!非常重要!! 机器人所在服务器的公网访问地址，用于生成图片URL
    # 必须确保此地址可以从公网访问到 "host:port"
    # 例如: "http://your-server-ip:8080" 或 "https://your.domain.com"
    external_url: "http://127.0.0.1:8080"
  message: "欢迎使用 THE FINALS BOT API"
  tv_ver: "1.0.0"

# -----------------------------------------------------------------
# 赛季配置
# -----------------------------------------------------------------
season:
  current: "s3"  # 用于命令中不指定赛季时的默认查询赛季
  update_interval: 60  # 赛季信息更新间隔(秒)
  end_time: "2025-09-26 08:00:00" # 赛季结束时间，格式为 YYYY-MM-DD HH:MM:SS

# -----------------------------------------------------------------
# 翻译功能配置
# -----------------------------------------------------------------
translation:
  enabled: true  # 是否启用游戏内文本的翻译功能
  file: "data/translations.json"  # 翻译文件路径

# -----------------------------------------------------------------
# 图片发送与存储配置
# -----------------------------------------------------------------
image:
  # 图片发送方式:
  # - url: (推荐) 先将图片保存到本地，通过API服务器生成URL发送。需要 server.api.enabled = true 和正确的 external_url。
  # - base64: 直接将图片的base64编码包含在消息中发送，目前已经失效（被腾讯BAN了）
  send_method: "url"
  
  # 图片存储配置 (仅在 send_method = "url" 时生效)
  storage:
    path: "static/temp_images"  # 图片临时存储路径
    lifetime: 24                # 图片在服务器上的生命周期(小时)
    cleanup_interval: 1         # 定时清理过期图片的间隔(小时)

# -----------------------------------------------------------------
# Redis 缓存配置
# -----------------------------------------------------------------
redis:
  host: 127.0.0.1   # Redis 服务器地址
  port: 6379        # Redis 端口
  db: 0             # Redis 数据库编号
  password: ""      # Redis 密码，如果没有则留空
  timeout: 5        # 连接超时时间(秒)

# -----------------------------------------------------------------
# 公告功能配置
# -----------------------------------------------------------------
announcements:
  enabled: false  # 是否启用公告功能
  items:
    # 公告ID，必须唯一
    - id: "announcement_1" 
      # 公告内容
      message: "【机器人公告】\n这是一个测试公告，用于展示新功能！"
      # 公告生效的开始和结束时间 (ISO 8601 格式，包含时区)
      start_time: "2024-01-01T00:00:00+08:00"
      end_time: "2025-01-01T00:00:00+08:00"
    
    - id: "maintenance_notice"
      message: "【机器人公告】\n机器人将于 2024年7月25日 凌晨 2:00 至 4:00 进行系统维护，届时将无法响应，敬请谅解。"
      start_time: "2024-07-20T00:00:00+08:00"
      end_time: "2024-07-25T02:00:00+08:00"
