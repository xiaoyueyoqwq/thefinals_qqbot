Python SDK 接入指南



#sdk 安装

外发版本通过下面方式安装

pip install qq-botpy


1


> 更新包的话需要添加 --upgrade 兼容版本：python3.8+

#sdk 使用

需要使用的地方import botpy

import botpy


1


#兼容提示

> 原机器人的老版本qq-bot仍然可以使用，但新接口的支持上会逐渐暂停，此次升级不会影响线上使用的机器人

#示例机器人

examples (opens new window)目录下存放示例机器人，可供实现参考。

#botpy-API

基于 机器人开放平台API (opens new window)实现的 API 接口封装。

#快速示例

通过继承实现bot.Client, 实现自己的机器人Client

import botpy
from botpy.types.message import Message

class MyClient(botpy.Client):
    async def on_at_message_create(self, message: Message):
        await self.api.post_message(channel_id=message.channel_id, content="content")

intents = botpy.Intents(public_guild_messages=True) 
client = MyClient(intents=intents)
client.run(appid={appid}, token={token})


1
2
3
4
5
6
7
8
9
10


#botpy-事件监听

异步模块基于 websocket 技术用于监听频道内的相关事件，如消息、成员变化等事件，用于开发者对事件进行相应的处理。

更完整的事件说明，请参考 事件监听(opens new window)

#订阅事件的方法

#方法一：

intents = botpy.Intents() 
client = MyClient(intents=intents)


1
2


在Intents中填入对应的参数

例子：

intents = botpy.Intents(public_guild_messages=True, direct_message=True, guilds=True)


1


#方法二：

intents = botpy.Intents.none()


1


然后打开对应的订阅(参数列表)

intents.public_guild_messages=True
intents.direct_message=True
intents.guilds=True


1
2
3


说明：

方法二对应的快捷订阅方式为

订阅所有事件

intents = botpy.Intents.all()


1


订阅所有的公域事件

intents = botpy.Intents.default()


1


#备注

也可以通过预设置的类型，设置需要监听的事件通道

import botpy

intents = botpy.Intents.none()
intents.public_guild_messages=True


1
2
3
4


#参数列表

参数含义public_guild_messages公域消息事件guild_messages消息事件 (仅 私域 机器人能够设置此 intents)direct_message私信事件guild_message_reactions消息相关互动事件guilds频道事件guild_members频道成员事件interaction互动事件message_audit消息审核事件forums论坛事件 (仅 私域 机器人能够设置此 intents)audio_action音频事件

#日志打印

基于自带的 logging 模块封装的日志模块，提供了日志写入以及美化了打印格式，并支持调整打印级别（默认打印级别为 INFO）。

#使用方法

引用模块，并获取 logger 实例：

from botpy import logging


1


或者通过botpy.logger也可以获取logger对象

然后就可以愉快地使用 logger 进行打印。例如：

from botpy import logger

logger.info("hello world!")


1
2
3


#日志设置

SDK的日志设置集成在bot.Client的实例化阶段，也可通过logging.configure_logging修改(均为可选)

import botpy

# 示例，非默认值
botpy.Client(
    log_level=10,
    log_format="new format",
    bot_log=None,
    ext_handlers=False,
    log_config="log_config.json"
)


1
2
3
4
5
6
7
8
9
10


#log_level

日志级别，默认为INFO

命令行启动py可增加参数-d 或 --debug快捷打开debug日志

python3 demo_at_reply.py -d


1


几个可选取值（参考了logging模块的取值 (opens new window)）：

Level取值CRITICAL50ERROR40WARNING30INFO20DEBUG10NOTSET0

#log_format

日志控制台输出格式，默认为 "\033[1;33m[%(levelname)s]\t(%(filename)s:%(lineno)s)%(funcName)s\t\033[0m%(message)s"

#bot_log

是否启用botpy日志，默认为True

True 启用
None 禁用 拓展
False 禁用 拓展+控制台输出

#ext_handlers

日志Handler拓展，为True使用默认拓展，False不添加拓展，可用list添加多个拓展。默认为True

默认拓展

import os
import logging
from logging.handlers import TimedRotatingFileHandler

DEFAULT_FILE_HANDLER = {
    # 要实例化的Handler
    "handler": TimedRotatingFileHandler,
    # 可选 Default to DEFAULT_FILE_FORMAT
    "format": "%(asctime)s\t[%(levelname)s]\t(%(filename)s:%(lineno)s)%(funcName)s\t%(message)s",
    # 可选 Default to DEBUG
    "level": logging.DEBUG,
    # 以下是Handler相关参数
    "when": "D",
    "backupCount": 7,
    "encoding": "utf-8",
    # *特殊* 对于filename参数，其中如有 %(name)s 会在实例化阶段填入相应的日志name
    "filename": os.path.join(os.getcwd(), "%(name)s.log"),
}


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18


#修改默认拓展

import os
import botpy
from botpy.logging import DEFAULT_FILE_HANDLER

# 修改日志路径
DEFAULT_FILE_HANDLER["filename"] = os.path.join(os.getcwd(), "log", "%(name)s.log")
# 修改日志格式
DEFAULT_FILE_HANDLER["format"] = "new format"

botpy.Client(ext_handlers=DEFAULT_FILE_HANDLER)


1
2
3
4
5
6
7
8
9
10


#log_config

该参数将传入logging.config.dictConfig(内置logging而非botpy.logging)，如果为.json/.yaml文件路径将从文件中读取配置，无默认值
口说明
QQ频道机器人提供两类接口：

基于 REST 风格的 OPENAPI
基于 WebSocket 提供实时事件通知的事件中心
#接口域名
正式环境：https://api.sgroup.qq.com/
沙箱环境：https://sandbox.api.sgroup.qq.com 沙箱环境只会收到测试频道的事件，且调用openapi仅能操作测试频道
#SDK
golang: https://github.com/tencent-connect/botgo(opens new window)
nodejs: https://github.com/tencent-connect/bot-node-sdk(opens new window)
python: https://github.com/tencent-connect/botpy(opens new window)
#票据
申请机器人通过后，平台将会下发三个票据。具体描述如下：

票据    描述
bot_app_id    用于识别一个机器人的 id
bot_secret    用于在 oauth 场景进行请求签名的密钥
bot_token    机器人token，用于以机器人身份调用 openapi，格式为 ${app_id}.${random_str}
#OPENAPI 鉴权方式
使用在 HTTP 上添加 Authorization 头来进行鉴权。支持两种类型的 TOKEN

#Bot Token
使用申请机器人时平台返回的机器人 appID + token 拼接而成。此时，所有的操作都是以机器人身份来完成的。

Authorization: Bot 100000.Cl2FMQZnCjm1XVW7vRze4b7Cq4se7kKWs

#Bearer Token
使用 OAUTH2.0 接口，通过一次性 CODE 换取的代表用户登录态的 Token。此时所有的操作都是以授权用户的身份来完成的。

Authorization: Bearer CZhtkLDpNYXgPH9Ml6shqh2OwykChw

#加密
只支持 HTTPS 以及 WSS。不支持不安全的 HTTP 与 WS。

#错误信息描述
使用 HTTP 状态码来代表具体错误。20x 为成功。5xx 错误码代表服务端相关错误。4xx错误代表客户端相关错误，如鉴权不通过。 当 HTTP 状态码不是 20x 的时候，可以从 body 中读取错误信息 json 进行解析，获取具体错误内容。

具体错误可以参考API错误码和WebSocket错误码

#ID 描述
协议中返回的用户ID，频道ID，子频道ID，均是 UINT64 类型的数字。 由于返回在 JSON 中，JS 解析 JSON 中的大数的时候会造成精度丢失所以在返回中都用字符串来返回。

#数据格式
目前仅支持返回 JSON 格式数据

#开发流程
开发者注册开发者平台账号并创建机器人后，可以通过官方提供的 API 或 SDK 进行机器人业务逻辑的开发。

开发者可以阅读本文档后通过原生 HTTP 与 Websocket 的方式进行开发，也可以使用官方提供的 Go SDK 进行开发。

本文档将采用 Go SDK 的方式进行描述。

#1.Go 开发环境配置
下载 Golang v1.13 及以上版本。点击这里 (opens new window)进行下载。

#2.SDK 下载
go get github.com/tencent-connect/botgo
#3.使用
在项目中引入 SDK：

import bot "github.com/tencent-connect/botgo"
定义一个 bot client 来调用 SDK 提供的各种操作 QQ 频道的 API：

token := token.BotToken(conf.AppID, conf.Token)
api := botgo.NewOpenAPI(token).WithTimeout(3 * time.Second) // 使用NewSandboxOpenAPI创建沙箱环境的实例
查看本文下方的例子获取更多信息。

#使用例子
https://github.com/tencent-connect/botgo/tree/master/examples(opens new window)

#一种简单的工作流
#添加机器人
从手Q上，添加机器人到频道中

#获取频道ID
获取频道ID有两个方法

1.监听 websocket 事件

监听 GUILD_CREATE 类型事件，得到 Guild ID
监听 AT_MESSAGE_CREATE 类型事件，得到 Guild ID
2.查询机器人接入的频道列表

调用 GET /users/@me/guilds 获取机器人所在的频道，从中提取 Guild ID
#发送消息
使用 Guild ID 拉取 Channels，得到 Channel ID
使用 POST /channels/{channel_id}/messages 发送消息
#获取其他数据
如果需要其他数据，也可以调用其他接口获取